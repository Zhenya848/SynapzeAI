// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TestsService.Infrastructure.DbContexts;

#nullable disable

namespace TestsService.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250828092823_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TestsService.Domain.SavedTest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid")
                        .HasColumnName("test_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_saved_tests");

                    b.HasIndex("TestId")
                        .HasDatabaseName("ix_saved_tests_test_id");

                    b.ToTable("saved_tests", (string)null);
                });

            modelBuilder.Entity("TestsService.Domain.SolvingHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("SolvingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("solving_date");

                    b.Property<int>("SolvingTimeSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("solving_time_seconds");

                    b.Property<string>("UniqueUserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("unique_user_name");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_email");

                    b.Property<Guid?>("test_id")
                        .HasColumnType("uuid")
                        .HasColumnName("test_id");

                    b.HasKey("Id")
                        .HasName("pk_solving_histories");

                    b.HasIndex("test_id")
                        .HasDatabaseName("ix_solving_histories_test_id");

                    b.ToTable("solving_histories", (string)null);
                });

            modelBuilder.Entity("TestsService.Domain.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Answers")
                        .HasColumnType("jsonb")
                        .HasColumnName("answers");

                    b.Property<string>("RightAnswer")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("right_answer");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer")
                        .HasColumnName("serial_number");

                    b.Property<string>("TaskMessage")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("task_message");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("task_name");

                    b.Property<Guid?>("test_id")
                        .HasColumnType("uuid")
                        .HasColumnName("test_id");

                    b.HasKey("Id")
                        .HasName("pk_tasks");

                    b.HasIndex("test_id")
                        .HasDatabaseName("ix_tasks_test_id");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("TestsService.Domain.TaskHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Answers")
                        .HasColumnType("jsonb")
                        .HasColumnName("answers");

                    b.Property<string>("MessageAI")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("message_ai");

                    b.Property<string>("RightAnswer")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("right_answer");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("integer")
                        .HasColumnName("serial_number");

                    b.Property<string>("TaskMessage")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("task_message");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("task_name");

                    b.Property<string>("UserAnswer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_answer");

                    b.Property<Guid?>("solving_history_id")
                        .HasColumnType("uuid")
                        .HasColumnName("solving_history_id");

                    b.HasKey("Id")
                        .HasName("pk_task_histories");

                    b.HasIndex("solving_history_id")
                        .HasDatabaseName("ix_task_histories_solving_history_id");

                    b.ToTable("task_histories", (string)null);
                });

            modelBuilder.Entity("TestsService.Domain.TaskStatistic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<float>("AvgTimeSolvingSec")
                        .HasColumnType("real")
                        .HasColumnName("avg_time_solving_sec");

                    b.Property<int>("ErrorsCount")
                        .HasColumnType("integer")
                        .HasColumnName("errors_count");

                    b.Property<DateTime>("LastReviewTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_review_time");

                    b.Property<int>("RightAnswersCount")
                        .HasColumnType("integer")
                        .HasColumnName("right_answers_count");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("task_id")
                        .HasColumnType("uuid")
                        .HasColumnName("task_id");

                    b.HasKey("Id")
                        .HasName("pk_task_statistics");

                    b.HasIndex("task_id")
                        .HasDatabaseName("ix_task_statistics_task_id");

                    b.ToTable("task_statistics", (string)null);
                });

            modelBuilder.Entity("TestsService.Domain.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_published");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("test_name");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("theme");

                    b.Property<string>("UniqueUserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("unique_user_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_tests");

                    b.ToTable("tests", (string)null);
                });

            modelBuilder.Entity("TestsService.Domain.SavedTest", b =>
                {
                    b.HasOne("TestsService.Domain.Test", null)
                        .WithMany("SavedTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_saved_tests_tests_test_id");
                });

            modelBuilder.Entity("TestsService.Domain.SolvingHistory", b =>
                {
                    b.HasOne("TestsService.Domain.Test", null)
                        .WithMany("SolvingHistories")
                        .HasForeignKey("test_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_solving_histories_tests_test_id");
                });

            modelBuilder.Entity("TestsService.Domain.Task", b =>
                {
                    b.HasOne("TestsService.Domain.Test", null)
                        .WithMany("Tasks")
                        .HasForeignKey("test_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_tasks_tests_test_id");
                });

            modelBuilder.Entity("TestsService.Domain.TaskHistory", b =>
                {
                    b.HasOne("TestsService.Domain.SolvingHistory", null)
                        .WithMany("TaskHistories")
                        .HasForeignKey("solving_history_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_task_histories_solving_histories_solving_history_id");
                });

            modelBuilder.Entity("TestsService.Domain.TaskStatistic", b =>
                {
                    b.HasOne("TestsService.Domain.Task", null)
                        .WithMany("TaskStatistics")
                        .HasForeignKey("task_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_task_statistics_tasks_task_id");
                });

            modelBuilder.Entity("TestsService.Domain.Test", b =>
                {
                    b.OwnsOne("TestsService.Domain.ValueObjects.LimitTime", "LimitTime", b1 =>
                        {
                            b1.Property<Guid>("TestId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Minutes")
                                .HasColumnType("integer")
                                .HasColumnName("minutes");

                            b1.Property<int>("Seconds")
                                .HasColumnType("integer")
                                .HasColumnName("seconds");

                            b1.HasKey("TestId");

                            b1.ToTable("tests");

                            b1.WithOwner()
                                .HasForeignKey("TestId")
                                .HasConstraintName("fk_tests_tests_id");
                        });

                    b.Navigation("LimitTime");
                });

            modelBuilder.Entity("TestsService.Domain.SolvingHistory", b =>
                {
                    b.Navigation("TaskHistories");
                });

            modelBuilder.Entity("TestsService.Domain.Task", b =>
                {
                    b.Navigation("TaskStatistics");
                });

            modelBuilder.Entity("TestsService.Domain.Test", b =>
                {
                    b.Navigation("SavedTests");

                    b.Navigation("SolvingHistories");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
