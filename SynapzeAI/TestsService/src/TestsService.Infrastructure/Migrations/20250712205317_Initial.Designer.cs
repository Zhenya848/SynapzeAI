// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TestsService.Infrastructure.DbContexts;

#nullable disable

namespace TestsService.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250712205317_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TestsService.Domain.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Answers")
                        .HasColumnType("jsonb")
                        .HasColumnName("answers");

                    b.Property<string>("AudioPath")
                        .HasColumnType("text")
                        .HasColumnName("audio_path");

                    b.Property<DateTime>("DeletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletion_date");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("NextReview")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_review");

                    b.Property<string>("RightAnswer")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("right_answer");

                    b.Property<string>("TaskMessage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("task_message");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("task_name");

                    b.Property<Guid?>("test_id")
                        .HasColumnType("uuid")
                        .HasColumnName("test_id");

                    b.HasKey("Id")
                        .HasName("pk_tasks");

                    b.HasIndex("test_id")
                        .HasDatabaseName("ix_tasks_test_id");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("TestsService.Domain.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DeletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletion_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_published");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("test_name");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("theme");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_tests");

                    b.ToTable("tests", (string)null);
                });

            modelBuilder.Entity("TestsService.Domain.Task", b =>
                {
                    b.HasOne("TestsService.Domain.Test", null)
                        .WithMany("Tasks")
                        .HasForeignKey("test_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_tasks_tests_test_id");

                    b.OwnsOne("TestsService.Domain.ValueObjects.TaskStatistic", "TaskStatistic", b1 =>
                        {
                            b1.Property<Guid>("TaskId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<float>("AvgTimeSolvingSec")
                                .HasColumnType("real")
                                .HasColumnName("task_statistic_avg_time_solving_sec");

                            b1.Property<int>("ErrorsCount")
                                .HasColumnType("integer")
                                .HasColumnName("task_statistic_errors_count");

                            b1.Property<DateTime>("LastReviewTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("task_statistic_last_review_time");

                            b1.Property<int>("RightAnswersCount")
                                .HasColumnType("integer")
                                .HasColumnName("task_statistic_right_answers_count");

                            b1.HasKey("TaskId");

                            b1.ToTable("tasks");

                            b1.WithOwner()
                                .HasForeignKey("TaskId")
                                .HasConstraintName("fk_tasks_tasks_id");
                        });

                    b.Navigation("TaskStatistic");
                });

            modelBuilder.Entity("TestsService.Domain.Test", b =>
                {
                    b.OwnsOne("TestsService.Domain.ValueObjects.LimitTime", "LimitTime", b1 =>
                        {
                            b1.Property<Guid>("TestId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Minutes")
                                .HasColumnType("integer")
                                .HasColumnName("limit_time_minutes");

                            b1.Property<int>("Seconds")
                                .HasColumnType("integer")
                                .HasColumnName("limit_time_seconds");

                            b1.HasKey("TestId");

                            b1.ToTable("tests");

                            b1.WithOwner()
                                .HasForeignKey("TestId")
                                .HasConstraintName("fk_tests_tests_id");
                        });

                    b.Navigation("LimitTime");
                });

            modelBuilder.Entity("TestsService.Domain.Test", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
